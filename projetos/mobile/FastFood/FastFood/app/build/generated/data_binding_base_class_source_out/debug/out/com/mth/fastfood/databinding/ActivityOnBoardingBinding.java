// Generated by view binder compiler. Do not edit!
package com.mth.fastfood.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import androidx.viewpager.widget.ViewPager;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.tabs.TabLayout;
import com.mth.fastfood.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityOnBoardingBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton btnAccessAccount;

  @NonNull
  public final MaterialButton btnAccessDirect;

  @NonNull
  public final TabLayout tabLayout;

  @NonNull
  public final ViewPager viewPage;

  private ActivityOnBoardingBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton btnAccessAccount, @NonNull MaterialButton btnAccessDirect,
      @NonNull TabLayout tabLayout, @NonNull ViewPager viewPage) {
    this.rootView = rootView;
    this.btnAccessAccount = btnAccessAccount;
    this.btnAccessDirect = btnAccessDirect;
    this.tabLayout = tabLayout;
    this.viewPage = viewPage;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityOnBoardingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityOnBoardingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_on_boarding, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityOnBoardingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_access_account;
      MaterialButton btnAccessAccount = ViewBindings.findChildViewById(rootView, id);
      if (btnAccessAccount == null) {
        break missingId;
      }

      id = R.id.btn_access_direct;
      MaterialButton btnAccessDirect = ViewBindings.findChildViewById(rootView, id);
      if (btnAccessDirect == null) {
        break missingId;
      }

      id = R.id.tab_layout;
      TabLayout tabLayout = ViewBindings.findChildViewById(rootView, id);
      if (tabLayout == null) {
        break missingId;
      }

      id = R.id.view_page;
      ViewPager viewPage = ViewBindings.findChildViewById(rootView, id);
      if (viewPage == null) {
        break missingId;
      }

      return new ActivityOnBoardingBinding((LinearLayout) rootView, btnAccessAccount,
          btnAccessDirect, tabLayout, viewPage);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
